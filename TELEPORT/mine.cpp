#include <bits/stdc++.h>#define int long long#define INF 0x3f3f3f3f3f3f#define ALL(v) (v).begin(), (v).end()#define pii pair<int, int>#define fi first#define se second#define MASK(x) (1LL << (x))#define BIT(i, x) ((x) >> (i) & 1)#define FastIO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);using namespace std;template<class X, class Y>	inline bool maximize(X &x, const Y &y) {return (x < y ? x = y, 1 : 0);}template<class X, class Y>	inline bool minimize(X &x, const Y &y) {return (x > y ? x = y, 1 : 0);}const int NM = 1e5 + 10;int n;int sa = 0, sb = 0, result = INF;int f[NM], g[NM];vector<int> a, b;void xuli(){    sort(ALL(a)); sort(ALL(b));    for(int u : a) sa += u;    for(int u : b) sb += u;    for(int i = 1; i <= a.size(); i++) f[i] = f[i - 1] + a[i - 1];    for(int j = 1; j <= b.size(); j++) g[j] = g[j - 1] + b[j - 1];    int res = 0;    for(int i = 1; i <= a.size(); i++){        res += a[i - 1];        if((a[i].size() - i) % 2 != 0){            int m = (a[i].size() + i) / 2;            int tmp = res + (f[a.size()] - f[m]) - (f[m - 1] - f[i]);            minimize(result, tmp);        } else {            int m = (a[i].size() + i + 1) / 2;            int tmp = res + (f[a.size()] - f[m]) - (f[m - 1] - f[i]);            minimize(result, tmp);        }    }    int ans = 0;    for(int i = 1; i <= b.size(); i++){        ans += b[i - 1];        if((b[i].size() - i) % 2 != 0){            int m = (b[i].size() + i) / 2;            int tmp = ans + (g[a.size()] - g[m]) - (g[m - 1] - g[i]);            minimize(result, tmp);        } else {            int m = (b[i].size() + i + 1) / 2;            int tmp = ans + (g[a.size()] - g[m]) - (g[m - 1] - g[i]);            minimize(result, tmp);        }    }    cout << result;}int32_t main(){    FastIO    freopen("TELEPORT.INP", "r", stdin);    freopen("TELEPORT.OUT", "w", stdout);    cin >> n;    for(int i = 1; i <= n; i++){        int u; cin >> u;        if(u > 0) a.push_back(u);        if(u < 0) a.push_back(-u);    }    return 0;}